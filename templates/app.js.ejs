<% if (strict) { -%>
'use strict';

<% } -%>
const { join } = require('path');
const express = require('express');
const createError = require('http-errors');
<% Object.keys(modules).sort().forEach(variable => { -%>
const <%- variable %> = require('<%- modules[variable] %>');
<% }); -%>

<% Object.keys(localModules).sort().forEach(variable => { -%>
const <%- variable %> = require('<%- localModules[variable] %>');
<% }); -%>

const app = express();

<% if (view) { -%>
<% if (view.render) { -%>
app.engine('<%- view.engine %>', <%- view.render %>);
<% } -%>
app.set('views', join(__dirname, 'views'));
app.set('view engine', '<%- view.engine %>');

<% } -%>
<% uses.forEach(use => { -%>
app.use(<%- use %>);
<% }); -%>

<% if (authentication.enabled) { -%>
const User = require('./models/user');

app.use((req, res, next) => {
  const userId = req.session.user;
  if (userId) {
    User.findById(userId)
      .then(user => {
        req.user = user;
        res.locals.user = req.user;
        next();
      })
      .catch(error => {
        next(error);
      });
  } else {
    next();
  }
});
<% } -%>

<% mounts.forEach(mount => { -%>
app.use(<%= mount.path %>, <%- mount.code %>);
<% }); -%>

// Catch missing routes and forward to error handler
app.use((req, res, next) => {
  next(createError(404));
});

// Catch all error handler
app.use((error, req, res, next) => {
  // Set error information, with stack only available in development
  res.locals.message = error.message;
  res.locals.error = req.app.get('env') === 'development' ? error : {};

  res.status(error.status || 500);
<% if (architecture === 'mvc') { -%>
<% if (template) { -%>
  res.render('error');
<% } else { -%>
  res.sendFile(join(__dirname, '../views', 'error.html'));
<% } -%>
<% } else if (architecture === 'api') { -%>
  res.json({ type: 'error', error: { message: error.message } });
<% } -%>
});

module.exports = app;
