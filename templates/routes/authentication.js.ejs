<% if (strict) { -%>
'use strict';

<% } -%>
const { Router } = require('express');
const router = new Router();
<% if (architecture === 'mvc' && !template) { -%>
const { join } = require('path');
<% } -%>
<% if (!authentication.mechanism) { -%>
const User = require('./../models/user');
const bcryptjs = require('bcryptjs');
<% } -%>
<% if (authentication.mechanism === 'passport') { -%>
const passport = require('passport');
<% } -%>

<% if (architecture === 'mvc') { -%>
router.get('/sign-up', (req, res, next) => {
<% if (template) { -%>
  res.render('sign-up');
<% } else { -%>
  res.sendFile(join(__dirname, '../views', 'authentication/sign-up.html'));
<% } -%>
});

<% } -%>
<% if (!authentication.mechanism) { -%>
router.post('/sign-up', (req, res, next) => {
  const { name, email, password } = req.body;
  bcryptjs
    .hash(password, 10)
    .then(hash => {
      return User.create({
        name,
        email,
        passwordHash: hash
      });
    })
    .then(user => {
      req.session.user = user._id;
<% if (architecture === 'mvc') { -%>
      res.redirect('/private');
<% } -%>
<% if (architecture === 'api') { -%>
      res.json({ user });
<% } -%>
    })
    .catch(error => {
      next(error);
    });
});

<% } -%>
<% if (authentication.mechanism === 'passport' && authentication.strategies.includes('local')) { -%>
router.post(
  '/sign-up',
  passport.authenticate('local-sign-up', {
    successRedirect: '/private',
    failureRedirect: '/sign-up'
  })
);

<% } -%>
<% if (authentication.mechanism === 'passport' && authentication.strategies.includes('github')) { -%>
router.post(
  '/sign-up',
  passport.authenticate('github', {
    successRedirect: '/private',
    failureRedirect: '/sign-up'
  })
);

<% } -%>
<% if (architecture === 'mvc') { -%>
router.get('/sign-in', (req, res, next) => {
<% if (template) { -%>
  res.render('sign-in');
<% } else { -%>
  res.sendFile(join(__dirname, '../views', 'authentication/sign-in.html'));
<% } -%>
});

<% } -%>
<% if (!authentication.mechanism) { -%>
router.post('/sign-in', (req, res, next) => {
  let userId;
  const { email, password } = req.body;
  User.findOne({ email })
    .then(user => {
      if (!user) {
        return Promise.reject(new Error("There's no user with that email."));
      } else {
        userId = user._id;
        return bcryptjs.compare(password, user.passwordHash);
      }
    })
    .then(result => {
      if (result) {
        req.session.user = userId;
<% if (architecture === 'mvc') { -%>
        res.redirect('/private');
<% } -%>
<% if (architecture === 'api') { -%>
        res.json({ user });
<% } -%>
      } else {
        return Promise.reject(new Error('Wrong password.'));
      }
    })
    .catch(error => {
      next(error);
    });
});

<% } -%>
<% if (authentication.mechanism === 'passport' && authentication.strategies.includes('local')) { -%>
router.post(
  '/sign-in',
  passport.authenticate('local-sign-in', {
    successRedirect: '/private',
    failureRedirect: '/sign-in'
  })
);

<% } -%>
<% if (authentication.mechanism === 'passport' && authentication.strategies.includes('github')) { -%>
router.get(
  '/github',
  passport.authenticate('github', {
    successRedirect: '/private',
    failureRedirect: '/authentication/sign-in'
  })
);

router.get(
  '/github-callback',
  passport.authenticate('github', {
    successRedirect: '/private',
    failureRedirect: '/authentication/sign-in'
  })
);

<% } -%>
router.post('/sign-out', (req, res, next) => {
<% if (authentication.mechanism === 'passport') { -%>
  req.logout();
<% } else { -%>
  req.session.destroy();
<% } -%>
<% if (architecture === 'mvc') { -%>
  res.redirect('/');
<% } else if (architecture === 'api') { -%>
  res.json({});
<% } -%>
});

module.exports = router;
